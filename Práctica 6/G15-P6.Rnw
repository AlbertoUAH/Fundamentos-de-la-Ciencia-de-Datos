\documentclass [a4paper] {article}
\usepackage[hidelinks]{hyperref}
\usepackage[spanish,activeacute]{babel}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{graphicx}
\usepackage{systeme}
\usepackage{booktabs}

\setlength{\parindent}{0pt}
\textwidth = 500pt
\hoffset = -70pt

\title{\textbf{Fundamentos de la Ciencia de Datos Práctica 6}}
\author{
	Fernández Díaz, Daniel\\
	Cano Díaz, Francisco\\
	Fernández Hernández, Alberto\\
}

\date{10 de diciembre del 2019}
\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle
\newpage
\tableofcontents
\newpage
\section{Mapas estáticos}
Los mapas estáticos (\textit{Static Maps}) es uno de los métodos de visualización más utilizados, el cual consiste en \textbf{visualizar una sola imagen}. Una de las herramientas  más utilizadas para visualizar gráficos de mapas es \textit{ggplot2}. Este paquete se basa en la \textbf{gramática de gráficos}, que consiste en una serie de componentes:
\begin{itemize}
  \item Datos a representar
  \item Aspectos estéticos (\textit{aesthetics}), como ejes de coordenadas, leyendas etc.
  \item Objetos geométricos (puntos, lineas, polígonos, áreas etc.)
  \item Escalas
  \item Coordenadas
\end{itemize}
Para este ejemplo visualizaremos los \textbf{porcentajes de asaltos producidos en Estados Unidos, argupados por Estados}. En primer lugar, instalamos el paquete \textit{ggplot2}:
<<>>=
# Cargamos el paquete ggplot2
if(!require(ggplot2)){
  install.packages("ggplot2")
  require(ggplot2)
}
@

Una vez instalado el paquete, debemos obtener las coordenadas de \textbf{latitud} y \textbf{longitud} de cada uno de los estados. Para ello, nos descargamos un \textit{dataframe} que contienen las coordenadas limítrofes de cada Estado, importado desde la librería \textit{ggplot2}. Por otro lado, descargamos el \textit{dataset} que contiene los \textbf{porcentajes de asaltos por cada Estado}:

<<>>=
# Descargamos las coordenadas de cada estado
if (!require(maps)) {
  install.packages("maps")
  require(maps)
}
estados <- map_data("state")
head(estados)
# Descargamos el dataset del numero de asaltos
arrestos <- USArrests
# Ponemos los noimbres de las columnas a minusculas
names(arrestos) <- tolower(names(arrestos))
arrestos$region <- tolower(rownames(USArrests))
head(arrestos)
@

Una vez descargados, unimos ambos \textit{dataframes} mediante la función \textit{merge}
<<>>=
df <- merge(estados, arrestos, sort = FALSE, by = "region")
df <- df[order(df$order), ]

head(df)
@

Por último, representaremos gráficamente los datos mediante la función \textit{ggplot}. Para ello, especificamos los siguientes parámetros:
\begin{itemize}
  \item \textit{ggplot}: indicamos el \textit{dataframe}. Por otro lado, establecemos las coordenadas de longitud para el eje X, así como las coordenadas de latitud para el eje Y.
  \item \textit{geom\_polygon}: para dibujar las diferentes fronteras.
  \item \textit{coord\_map}: para proyectar una parte del globo terráqueo (concretamente la región de Estados Unidos).
\end{itemize}
\begin{figure}[hpbt!]
\centering
<<fig = T>>=
if(!require(mapproj)){
  install.packages("mapproj")
  require(mapproj)
}
ggplot(df, aes(long, lat)) +
  # Con fill rellenamos cada estado en funcion del asalto
  geom_polygon(aes(group = group, fill = assault)) +
  # (29.5 , 45.5) Coordenadas de EEUU
  coord_map("albers",  at0 = 45.5, lat1 = 29.5)
@
\caption{Total de asaltos producidos en Estados Unidos}
\end{figure}
\newpage

\section{\textit{Bubble Maps}}
Los mapas de burbujas (\textit{Bubble Maps}) permiten representar \textbf{grandes volúmenes de datos, agrupados por intervalos}, donde cada intervalo se representa mediante un \textbf{círculo de diferente diámetro}. Para ello, utilizaremos el paquete \textit{tmap}. Este paquete ofrece un conjunto de herramientas que proporcionan una sintaxis concisa para la visualización de mapas \textbf{utilizando la menor cantidad de código posible}. Se basa en el concepto de \textbf{gramática de gráficos} (al igual que \textit{ggplot2}), separando los datos de entrada de la estética (\textbf{cómo visualizar los datos}). Para comenzar, \textbf{crearemos un \textit{mapa-mundi} en el que visualizaremos el índice de felicidad de cada país}. Para ello, realizamos los siguientes pasos:
\begin{enumerate}
  \item En primer lugar, debemos proyectar la plantilla del mapa. Para ello utilizaremos la función \textit{tm\_shape} para proyectar el \textit{mapa-mundi}.
  \item Por otro lado, rellenamos cada uno de los países en función del índice de felicidad
\end{enumerate}

Para proyectar el mapa, es necesario un \textbf{DataFrame espacial} (\textit{Spatial Dataframe}), el cual consiste en un conjunto de arcos y flechas unidos por puntos, proyectando finalmente el mapa. Para visualizar el \textit{mapa-mundi}, utilizaremos el \textit{dataframe} espacial \textit{World}, disponible en el paquete \textit{tmap}:
{\footnotesize
<<>>=
# Para concatenar diferentes funciones
# descargamos el paquete dplyr 
# (para concatenar utilizamos %>%)
if(!require(dplyr)){
  install.packages("dplyr")
  require(dplyr)
}

# Cargamos el paquete tmap
if(!require(tmap)){
  install.packages("tmap")
  require(tmap)
}

# Cargamos el dataset y los convertimos a dataframe
data("World")
World %>% as.data.frame() %>% head()
@
}
Como podemos observar, lo que nos devuelve es un \textit{dataframe espacial} cuya última columna (\textit{geomtry}) contiene las dimensiones de cada polígonos que queremos representar (en este caso, la forma de cada país).
Una vez cargado el \textit{dataframe} espacial, visualizamos los niveles de felicidad por país, utilizando las siguientes funciones:
\begin{itemize}
  \item \textit{tm\_shape}: para proyectar el mapa anterior.
  \item \textit{tm\_polygons}: para visualizar un dataset sobre una plantilla \textit{tm\_shape}
\end{itemize}
\begin{figure}[htbp!]
\centering
<<fig=T>>=
# 1. tm_shape: Utilizamos como plantilla el dataframe espacial
# del mapa-mundi

# 2. tm_polygons: visualizamos cada uno de los poligonos
# HPI: Happiness Index
# palette: seleccionamos la paleta de colores
tm_shape(World) + tm_polygons("HPI", palette = "-Blues")

@
\caption{Indice de felicidad por país}
\end{figure}
\newpage
\textit{tmap} nos permite añadir más capas sobre la plantilla original, por lo que vamos a visualizar el mapa anterior junto con el nuevo mapa de burbujas. Para ello, sobre la plantilla original creada con la función \textit{tm\_shape}, representaremos mediante la función \textit{tm\_polygons} los índices de felicidad por país y la población por ciudad (empleando la función \textit{tm\_bubbles} para representar los datos de población por puntos)
\begin{figure}[htbp!]
\centering
<<fig=T>>=
# 1, En primer lugar, cargamos los datos del total de
# poblacion de las grandes metropolis
data(metro)

# A continuacion, visualizamos los indices de felicidad
# mediante poligonos, asi como el total de poblacion con
# burbujas
tm_shape(World) + tm_polygons("HPI") + tm_shape(metro) + tm_bubbles("pop2010")
@
\caption{Indice de felicidad por país-Poblacion mundial del año 2010}
\end{figure}
\newpage
\section{Representar un \textit{dataset} sobre un mapa}
Una vez visto las diferentes herramientas para visualizar mapas en \texttt{R}, vamos a \textbf{representar datos sobre un mapa}. Por ejemplo, vamos a visualizar \textbf{los diferentes aeropuertos dispersos por Europa}. Para ello, nos descargamos un \textit{dataset} que contiene las coordenadas de \textbf{latitud} y \textbf{longitud} de los diferentes aeropuertos: \footnote{\url{https://openflights.org/data.html}}
<<>>=
# Descargamos el dataset
aeropuertos <- read.csv("https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat", header = FALSE)
# Cambiamos el nombre de las columnas
colnames(aeropuertos) <- c("ID", "nombre", "ciudad", "pais",
"IATA_FAA", "ICAO", "lat", "lon", "altitud", "zona_horaria", "DST")
# Mostramos los 10 primeros datos
head(aeropuertos,10)
@
\newpage
Este \textit{dataframe} contiene las siguientes columnas:
\begin{itemize}
  \item \textbf{ID del aeropuerto}
  \item \textbf{Nombre del aeropuerto}
  \item \textbf{Ciudad}
  \item \textbf{Pais}
  \item \textbf{Código Internacional del aeropuerto} (IATA\_FAA)
  \item \textbf{Código de la Organización de Aviación Civil Internacional} (ICAO)
  \item \textbf{Coordenadas latitud, lontigud y altitud}
  \item \textbf{Zona franja horaria}
\end{itemize}

Una vez descargado el \textit{dataset}, representamos gráficamente el \textit{mapa-mundi}. Para ello, utilizaremos el paquete \textit{rworldmap}:
\begin{figure}[htbp!]
\centering
<<fig=T>>=
if(!require(rworldmap)){
  install.packages("rworldmap")
  require(rworldmap)
}
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
points(aeropuertos$lon, aeropuertos$lat, col = "red", cex = .6)
@
\caption{Localización de aeropuertos}
\end{figure}
\newpage
\section{Mapas hexagonales}
Los mapas hexagonales (\textit{Hexbin maps}), permiten visualizar los datos mediante hexágonos de diferentes tonalidades. Valores de tonalidad altos indican una \textbf{mayor concentración}, mientras que valores bajos indican una \textbf{menor concentración}. A modo de ejemplo, \textbf{visualizaremos la cantidad de \textit{tweets} publicados con la etiqueta \textit{surf} alrededor de Europa}. Junto con el paquete \textit{ggplot2} utlizaremos el paquete \textit{viridis} que contiene la función \textit{scale\_fill\_viridis} con el que visualizaremos una leyenda sobre el mapa. En primer lugar, descargamos el paquete \textit{viridis}:
<<>>=

if(!require(viridis)){
  install.packages("viridis")
  require(viridis)
}

@
A continuación, descargamos el \textit{dataset}:
<<>>=
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv", sep=",", header=T)
head(data)
@
Finalmente, mediante la función \textit{ggplot} visualizamos el mapa hexagonal. Para ello, utilizaremos las siguientes funciones:
\begin{itemize}
  \item \textit{filter}: para filtrar por continente europeo.
  \item \textit{ggplot}:
    \begin{itemize}
      \item \textit{aes}: definimos las coordenadas de longitud (\textit{homelon}) como eje X y las coordenadas de latitud (\textit{homelat}) como eje Y.
      \item \textit{geom\_hex}: para visualizar cada dato con forma de hexágonos.
      \item \textit{annotate}: permite realizar añadir elementos concretos sobre la gráfica, como fragmentos de texto (especificado con el parámetro \textit{text}) o segmentos (\textit{segment}), indicando diferentes parámetros como la posición del objeto (\textit{x},\textit{y}); el color, tamaño o el ajuste de texto, entre otros.
      \item \textit{theme\_void}: para eliminar la cuadrícula y los ejes.
      \item \textit{xlim}, \textit{ylim}: para especificar los límites del gráfico.
      \item \textit{scale\_fill\_veridis}: para añadir una leyenda al gráfico
        \begin{itemize}
          \item \textit{option}: para especificar la paleta de colores (\textit{inferno}, por ejemplo).
          \item \textit{trans}: la escala a utilizar para dividir la paleta de colores (por ejemplo, una escala logarítmica o \textit{log}).
          \item \textit{breaks}: intervalo de valores en la leyenda.
          \item \textit{name}: título de la leyenda
          \item \textit{guide\_leyend}: especifica parámetros para la leyenda como la posición o la anchura.
        \end{itemize}
      \item \textit{ggtitle}: para añadir un título al gráfico. 
      \item \textit{theme}: parámetros del gráfico, como el color de fondo, la fuente, el color de la leyenda, el tamaño de letra o el tamaño del título.
    \end{itemize}
\end{itemize}

 \begin{figure}[htbp!]
\centering
<<fig = T>>=
data %>%
  filter(homecontinent=='Europe') %>%
  ggplot( aes(x=homelon, y=homelat)) + 
    geom_hex(bins=59) +
    ggplot2::annotate("text", x = -27, y = 72, 
            label="Tweets sobre #Surf", colour = "black", size=5, alpha=1, hjust=0) +
    ggplot2::annotate("segment", x = -27, xend = 10, 
            y = 70, yend = 70, colour = "black", size=0.2, alpha=1) +
    theme_void() +
    xlim(-30, 70) +
    ylim(0, 72) +
    scale_fill_viridis(
      option="inferno",
      trans = "log", 
      breaks = c(1,7,54,403,3000),
      name="Tweet # registrados en los ultimos 8 meses", 
      guide = guide_legend( keyheight = unit(2.5, units = "mm"), 
              keywidth=unit(10, units = "mm"), label.position = "top", 
              title.position = 'top', nrow=1) 
    )  +
    ggtitle( "" ) + 
    theme(
      legend.position = c(0.8, 1),
      legend.title=element_text(color="black", size=8),
      text = element_text(color = "#22211d"),
      plot.background = element_rect(fill = "#f5f5f2", color = NA), 
      panel.background = element_rect(fill = "#f5f5f2", color = NA), 
      legend.background = element_rect(fill = "#f5f5f2", color = NA),
      plot.title = element_text(size= 13, hjust=0.1, color = "#4e4d47", 
                  margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
    ) 
    
@
\caption{Tweets publicados sobre surf}
\end{figure}
\newpage
\section{Mapa de conexiones}
Un mapa de conexiones (\textit{Connection Map}) \textbf{muestra las conexiones entre diferentes puntos a lo largo de un mapa}. Para ello, utilizaremos los siguientes paquetes:
\begin{itemize}
  \item \textit{geosphere}: para la creación de conexiones entre diferentes puntos a lo largo del mapa.
  \item \textit{maps}: para la visualización del \textit{mapa-mundi}.
\end{itemize}
En primer lugar, descargamos y añadimos los paquetes:
<<>>=
if(!require(geosphere)){
  install.packages("geosphere")
  require(geosphere)
}
@
Para visualizar las conexiones entre los diferentes puntos, crearemos una función a la que llamaremos \textit{plot\_my\_connection}, que tendrá los siguientes parámetros:
\begin{itemize}
  \item textit{dep\_lon} y \textit{dep\_lat}: coordenadas de latitud y longitud del nodo 1.
  \item textit{arr\_lon} y \textit{arr\_lat}: coordenadas de latitud y longitud del nodo 2.
\end{itemize}

En primer lugar, utilizaremos la función \textit{gcIntermediate}, la cual nos devuelve las \textbf{coordenadas de los puntos que conforman la línea que conecta ambos nodos, en forma de matriz}. Con los puntos obtenidos, los almacenamos en un \textit{dataframe}. Finalmente, mediante la función \textit{lines} creamos una línea con los puntos obtenidos:
<<>>=
# Funcion para crear una conexion entre dos nodos
plot_my_connection=function(dep_lon, dep_lat, arr_lon, arr_lat, ...){
    inter <- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, 
    addStartEnd=TRUE, breakAtDateLine=F)             
    inter=data.frame(inter)
    diff_of_lon=abs(dep_lon) + abs(arr_lon)
    if(diff_of_lon > 180){
        lines(subset(inter, lon>=0), ...)
        lines(subset(inter, lon<0), ...)
    }else{
        lines(inter, ...)
        }
    }
@

Una vez creada la función, vamos a realizar una conexión (a modo de prueba) entre las siguientes ciudades:
\begin{itemize}
  \item \textbf{Buenos Aires}
  \item \textbf{París}
  \item \textbf{Melbourne}
  \item \textbf{San Petersburgo}
  \item \textbf{Abidjan}
  \item \textbf{Montreal}
  \item \textbf{Nairobi}
  \item \textbf{Salvador}
\end{itemize}
\newpage
\thispagestyle{empty}
\begin{figure}[htbp!]
\centering
<<fig=T>>=
# En primer lugar, creamos un dataset con las coordenadas
# de latitud y longitud de cada una de las ciudades.
data <- rbind(
    Buenos_aires=c(-58,-34),
    Paris=c(2,49),
    Melbourne=c(145,-38),
    Saint.Petersburg=c(30.32, 59.93),
    Abidjan=c(-4.03, 5.33),
    Montreal=c(-73.57, 45.52),
    Nairobi=c(36.82, -1.29),
    Salvador=c(-38.5, -12.97)
    )  %>% as.data.frame()
colnames(data)=c("long","lat")

# A continuacion, generamos parejas de nodos
all_pairs <- cbind(t(combn(data$long, 2)), t(combn(data$lat, 2))) %>% as.data.frame()
colnames(all_pairs) <- c("long1","long2","lat1","lat2")

# Mediante la funcion map representamos la plantilla
# con el mapa-mundi
par(mar=c(0,0,0,0))
# world = mapa-mundi
maps::map('world',col="#d1d1d1", fill=TRUE, bg="white", 
lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80))
 
# Por cada pareja de nodos, representamos graficamente 
# las conexiones entre los nodos mediante lineas
for(i in 1:nrow(all_pairs)){
    plot_my_connection(all_pairs$long1[i], all_pairs$lat1[i], all_pairs$long2[i], 
    all_pairs$lat2[i], col="skyblue", lwd=1)
    }
 
# Finalmente, representamos cada nodo mediante la funcion points
points(x=data$long, y=data$lat, col="slateblue", cex=2, pch=20)
text(rownames(data), x=data$long, y=data$lat,  col="slateblue", cex=1, pos=4)
@
\caption{Mapa de conexiones entre diferentes ciudades}
\end{figure}
\end{document}
